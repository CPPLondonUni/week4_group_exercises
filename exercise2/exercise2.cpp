//
// Created by Tristan Brindle on 24/10/2017.
//

#include "exercise2.hpp"

namespace {

char shift_char_by(char c, int n)
{
    if (c >= 'A' && c <= 'Z') {
        int val = c - 'A';
        val = (val + n) % 26;
        return val + 'A';
    }
    return c;
}


}


// Requirements:
//   -- given an uppercase character A-Z, shifts that character by 13 places
//   -- spaces, numbers and punctuation should not be changed
char shift_char(char c)
{
    return shift_char_by(c, 13);
}

// Requirements:
//   -- given a string consisting of uppercase characters and punctuation,
//      returns a new string with each character shifted by 13 places
//   -- spaces, numbers and punctuation should not be changed
std::string rot13(std::string str)
{
    for (char& c : str) {
        c = shift_char(c);
    }
    return str;
}

namespace {

// "Fixes" the shift factor to a positive integer between 0 and 25
int calculate_shift_factor(int n)
{
    int output = n % 26;
    while (output < 0) {
        output += 26;
    }

    return output;
}

}

// Requirements:
//   -- given a string consisting of uppercase characters and punctuation,
//      returns a new string with each character shifted by n places
std::string encode(std::string str, int n)
{
    for (char& c : str) {
        c = shift_char_by(c, calculate_shift_factor(n));
    }
    return str;
}

// Requirements:
//   -- given a string generated by encode(str, n), returns the original string
std::string decode(std::string str, int n)
{
    return encode(str, -n);
}